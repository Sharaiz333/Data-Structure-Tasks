#include <iostream>
#include <string>

using namespace std;

struct Student {
    string name;
    int semester;
    string sapId;
    Student* next;
    Student* prev;

    Student(string n, int s, string id) : name(n), semester(s), sapId(id), next(0), prev(0) {}
};

class DoublyLinkedList {
private:
    Student* head;

public:
    DoublyLinkedList() : head(0) {}

    void insertAtPosition(int position, string name, int semester, string sapId) {
        Student* newStudent = new Student(name, semester, sapId);
        if (position == 0) {
            newStudent->next = head;
            if (head) head->prev = newStudent;
            head = newStudent;
        } else {
            Student* temp = head;
            for (int i = 0; i < position - 1 && temp != 0; i++)
                temp = temp->next;

            if (temp == 0) {
                cout << "Position out of bounds. Adding at the end.\n";
                delete newStudent;
                insertAtEnd(name, semester, sapId);
                return;
            }

            newStudent->next = temp->next;
            newStudent->prev = temp;

            if (temp->next) temp->next->prev = newStudent;
            temp->next = newStudent;
        }
    }

    void insertAtEnd(string name, int semester, string sapId) {
        Student* newStudent = new Student(name, semester, sapId);
        if (head == 0) {
            head = newStudent;
            return;
        }

        Student* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newStudent;
        newStudent->prev = temp;
    }

    void deleteFromStart() {
        if (head == 0) {
            cout << "List is empty. Cannot delete from start.\n";
            return;
        }
        Student* temp = head;
        head = head->next;
        if (head) head->prev = 0;
        delete temp;
    }

    void deleteFromEnd() {
        if (head == 0) {
            cout << "List is empty. Cannot delete from end.\n";
            return;
        }
        if (head->next == 0) {
            delete head;
            head = 0;
            return;
        }
        Student* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->prev->next = 0;
        delete temp;
    }

    void display() {
        Student* temp = head;
        cout << "Student Records:\n";
        cout << "------------------------------------------------\n";
        cout << "| Name            | Semester | SAP ID          |\n";
        cout << "------------------------------------------------\n";
        while (temp) {
            cout << "| " << temp->name << "         | " << temp->semester << "       | " << temp->sapId << " |\n";
            temp = temp->next;
        }
        cout << "------------------------------------------------\n";
    }
};

int main() {
    DoublyLinkedList list;

    for (int i = 0; i < 7; ++i) {
        string name, sapId;
        int semester;
        cout << "Enter details for student " << i + 1 << ":\n";
        cout << "Name: ";
        cin >> name;
        cout << "Semester: ";
        cin >> semester;
        cout << "SAP ID: ";
        cin >> sapId;
        list.insertAtEnd(name, semester, sapId);
    }

    list.display();

    cout << "Insert a new student at a specific position:\n";
    string name, sapId;
    int semester, position;
    cout << "Position: ";
    cin >> position;
    cout << "Name: ";
    cin >> name;
    cout << "Semester: ";
    cin >> semester;
    cout << "SAP ID: ";
    cin >> sapId;
    list.insertAtPosition(position, name, semester, sapId);
    list.display();

    cout << "Deleting from start...\n";
    list.deleteFromStart();
    list.display();
    
    cout << "Deleting from end...\n";
    list.deleteFromEnd();
    list.display();

    return 0;
}

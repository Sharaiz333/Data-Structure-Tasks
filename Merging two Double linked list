#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) : data(value), next(0), prev(0) {}
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(0), tail(0) {}

    void insert(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    void insertAtMiddle(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = tail = newNode;
        } else {
            Node* slow = head;
            Node* fast = head;

            while (fast && fast->next) {
                slow = slow->next;
                fast = fast->next->next;
            }

            if (fast) {
                newNode->next = slow->next;
                newNode->prev = slow;
                if (slow->next) {
                    slow->next->prev = newNode;
                }
                slow->next = newNode;
                if (!newNode->next) {
                    tail = newNode;
                }
            } else {
                newNode->next = slow;
                newNode->prev = slow->prev;
                if (slow->prev) {
                    slow->prev->next = newNode;
                } else {
                    head = newNode;
                }
                slow->prev = newNode;
            }
        }
    }

    void deleteNode(int value) {
        Node* current = head;
        while (current) {
            if (current->data == value) {
                if (current->prev) {
                    current->prev->next = current->next;
                } else {
                    head = current->next; 
                }
                if (current->next) {
                    current->next->prev = current->prev;
                } else {
                    tail = current->prev; 
                }
                delete current;
                return;
            }
            current = current->next;
        }
    }

    int countNodes() {
        int count = 0;
        Node* current = head;
        while (current) {
            count++;
            current = current->next;
        }
        return count;
    }

    void displayForward() {
        Node* current = head;
        while (current) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }

    void displayBackward() {
        Node* current = tail;
        while (current) {
            cout << current->data << " ";
            current = current->prev;
        }
        cout << endl;
    }

    void mergeLists(DoublyLinkedList& other) {
        if (!other.head) return;

        if (!head) {
            head = other.head;
            tail = other.tail;
        } else {
            tail->next = other.head;
            other.head->prev = tail;
            tail = other.tail;
        }

        other.head = other.tail = 0;
    }

    ~DoublyLinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    DoublyLinkedList d1;
    d1.insert(10);
    d1.insert(20);
    d1.insert(30);

    cout << "List 1 (forward): ";
    d1.displayForward();

    DoublyLinkedList d2;
    d2.insert(40);
    d2.insert(50);
    d2.insert(60);

    cout << "List 2 (forward): ";
    d2.displayForward();

    d1.mergeLists(d2);
    cout << "After merging List 2 into List 1:\n";
    cout << "List 1 (forward): ";
    d1.displayForward();

    return 0;
}
